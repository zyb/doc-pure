set runtimepath+=$GOROOT/misc/vim
set fencs=utf-8,GB18030,ucs-bom,default,latin1,ucs-bom
syntax enable
syntax on
set nocp
set backspace=2
set number
set autoindent
set cindent
set ruler
set incsearch
set tabstop=4
set softtabstop=4	
set shiftwidth=4
set expandtab
set hls
set cino=g0,:0
set fdm=indent
set foldlevel=99
nnoremap <leader><space> za
"set nofoldenable
"set guifont=Source\ Code\ Pro\ for\ Powerline:h14
set guifont=Sauce\ Code\ Powerline\ ExtraLight:h14
set background=dark
set cul
colorscheme molokai 
"colorscheme solarized



" cursor lable
augroup resCur
  autocmd!
  autocmd BufReadPost * call setpos(".", getpos("'\""))
augroup END

let g:ackprg = 'ag --nogroup  --column'

"taglist
let Tlist_Show_One_File=1
let Tlist_WinWidth=40
let Tlist_Exit_OnlyWindow=1
let Tlist_Use_Right_Window=1

nmap <F1>   :NERDTreeToggle     <CR>
nmap <F2>   :TagbarToggle       <CR>
nmap <F8>   :Tlist              <CR>
nmap <D-r>  :FufFile            <CR>


""""""""""""" Ctrl + Direction"""""""""""""""""
nmap <C-H> <C-W>h
nmap <C-J> <C-W>j
nmap <C-K> <C-W>k
nmap <C-L> <C-W>l


"Add tags


filetype plugin indent on
autocmd FileType python setlocal et sta sw=4 sts=4
autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
autocmd FileType java set omnifunc=javacomplete#Complete
autocmd FileType c set omnifunc=ccomplete#Complete

au FileType go nmap <Leader>i <Plug>(go-info)
au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
au FileType go nmap <Leader>gb <Plug>(go-doc-browser)
au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>t <Plug>(go-test)
au FileType go nmap <leader>c <Plug>(go-coverage)
au FileType go nmap gd <Plug>(go-def)
au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au FileType go nmap <Leader>dt <Plug>(go-def-tab)

"""""""""""""" Using with syntastic for golang 
let g:syntastic_go_checkers = ['golint', 'vet', 'errcheck']
let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }


"autocmd BufWritePre *.go :Fmt
if has("autocmd") && exists("+omnifunc")
autocmd Filetype *
\ if &omnifunc == "" |
\ setlocal omnifunc=syntaxcomplete#Complete |
\ endif
endif
highlight Pmenu guibg=darkgrey guifg=black
highlight PmenuSel guibg=lightgrey guifg=black
let OmniCpp_NamespaceSearch=2
let OmniCpp_GlobalScopeSearch=1
let OmniCpp_ShowAccess=1
let OmniCpp_ShowScopelnAbbr=1
let OmniCpp_ShowPrototypeInAbbr=1 " 显示函数参数列表
let OmniCpp_MayCompleteDot=1   " 输入 .  后自动补全
let OmniCpp_MayCompleteArrow=1 " 输入 -> 后自动补全

let OmniCpp_MayCompleteDot=1   " 输入 .  后自动补全
let OmniCpp_MayCompleteArrow=1 " 输入 -> 后自动补全
let OmniCpp_MayCompleteScope=1 " 输入 :: 后自动补全
let OmniCpp_DefaultNamespaces=["std", "_GLIBCXX_STD"]
" 自动关闭补全窗口
au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
set completeopt=menuone,menu,longest

" the plugin management
filetype off                   " required!
" Note: Skip initialization for vim-tiny or vim-small.
if 0 | endif

if &compatible
  set nocompatible               " Be iMproved
endif

" Required:
set runtimepath^=~/.vim/bundle/neobundle.vim/

" Required:
call neobundle#begin(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'
NeoBundle 'Valloric/YouCompleteMe'
NeoBundle 'rdnetto/YCM-Generator'
" for color_coded
NeoBundleLazy 'jeaye/color_coded', { 
  \ 'build': {
    \   'unix': 'cmake . && make && make install',
  \ },
  \ 'autoload': { 'filetypes' : ['c', 'cpp', 'objc', 'objcpp'] },
  \ 'build_commands' : ['cmake', 'make']
\}
NeoBundle 'scrooloose/syntastic'
NeoBundle 'robturtle/newycm_extra_conf.py'
"NeoBundle 'gmarik/vundle'
NeoBundle 'mileszs/ack.vim'
NeoBundle 'scrooloose/nerdtree'
NeoBundle 'Xuyuanp/nerdtree-git-plugin'
NeoBundle 'vim-scripts/taglist.vim'
NeoBundle 'brookhong/cscope.vim'
NeoBundle 'vim-scripts/SrcExpl'
NeoBundle 'Raimondi/delimitMate'
NeoBundle 'honza/vim-snippets'
NeoBundle 'Shougo/neosnippet.vim'
NeoBundle 'vim-scripts/TagHighlight'
NeoBundle 'Lokaltog/vim-easymotion'
NeoBundle 'Shougo/unite.vim'
NeoBundle 'rstacruz/vim-fastunite'
NeoBundle 'Shougo/neomru.vim'
NeoBundle 'Shougo/unite-outline'
NeoBundle 'tsukkee/unite-tag'
NeoBundle 'amitab/vim-unite-cscope'
NeoBundle 'Shougo/vimproc.vim'
NeoBundle 'L9'
NeoBundle 'tmhedberg/SimpylFold'
NeoBundle 'https://github.com/jstemmer/gotags.git'
"go代码补全的插件
NeoBundle 'nsf/gocode', {'rtp': 'vim/'}

"go代码跳转提示
NeoBundle 'fatih/vim-go'
"代码结构提示
NeoBundle 'majutsushi/tagbar'
"自动规范import
NeoBundle 'onlytiancai/flake8'
NeoBundle 'nose-devs/nose'
NeoBundle 'vim-scripts/DoxygenToolkit.vim'
NeoBundle 'Mizuchi/STL-Syntax'
NeoBundle 'sjl/gundo.vim'
NeoBundle 'suan/vim-instant-markdown'
NeoBundle 'scrooloose/nerdcommenter'
NeoBundle 'jlanzarotta/bufexplorer'
NeoBundle 'bjoernd/vim-ycm-tex'
NeoBundle 'LaTeX-Box-Team/LaTeX-Box'
NeoBundle 'rizzatti/dash.vim'
NeoBundle 'mattn/vim-particle'
NeoBundle 'chrisbra/vim-diff-enhanced'
NeoBundle 'vim-scripts/DirDiff.vim'
NeoBundle 'adimit/prolog.vim'
"NeoBundle 'amiorin/vim-project'
NeoBundle 'jcfaria/Vim-R-plugin'
NeoBundle 'vim-airline/vim-airline'
NeoBundle 'vim-airline/vim-airline-themes'
NeoBundle 'klen/python-mode'
NeoBundle 'joonty/vdebug'
call neobundle#end()
filetype plugin indent on
syntax on

" vim-powerline
set laststatus=2
set t_Co=256

let g:airline_theme="hybrid"
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#whitespace#enabled = 0
let g:airline#extensions#whitespace#symbol = '!'
let g:airline_symbols = {}

let g:Powerline_symbols='unicode'
set encoding=utf8

" These lines setup the environment to show graphics and colors correctly.
set nocompatible
set t_Co=256
 
let g:minBufExplForceSyntaxEnable = 1
 
if ! has('gui_running')
   set ttimeoutlen=10
   augroup FastEscape
      autocmd!
      au InsertEnter * set timeoutlen=0
      au InsertLeave * set timeoutlen=1000
   augroup END
endif
 
set laststatus=2 " Always display the statusline in all windows
set showtabline=1
let g:Powerline_colorscheme='solarized256'
set noshowmode " Hide the default mode text (e.g. -- INSERT -- below the statusline)

let g:go_doc_keywordprg_enabled=0
let g:godef_split=1
let g:godef_same_file_in_same_window=1
let g:go_fmt_command="goimports"
let g:go_metalinter_command = "gometalinter"
let g:go_snippet_engine = "neosnippet"
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_interfaces = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1

let g:tagbar_type_go = {
  \ 'ctagstype' : 'go',
  \ 'kinds'	 : [
    \ 'p:package',
    \ 'i:imports:1',
    \ 'c:constants',
    \ 'v:variables',
    \ 't:types',
    \ 'n:interfaces',
    \ 'w:fields',
    \ 'e:embedded',
    \ 'm:methods',
    \ 'r:constructor',
    \ 'f:functions'
  \ ],
  \ 'sro' : '.',
  \ 'kind2scope' : {
    \ 't' : 'ctype',
    \ 'n' : 'ntype'
  \ },
  \ 'scope2kind' : {
    \ 'ctype' : 't',
    \ 'ntype' : 'n'
  \ },
  \ 'ctagsbin'  : '/Users/ningyu/Source/code/go/bin/gotags',
  \ 'ctagsargs' : '-sort -silent'
\ }

" 自动补全配置
inoremap <expr> <CR>       pumvisible() ? "\<C-y>" : "\<CR>"
"回车即选中当前项
"上下左右键的行为 会显示其他信息
inoremap <expr> <Down>     pumvisible() ? "\<C-n>" : "\<Down>"
inoremap <expr> <Up>       pumvisible() ? "\<C-p>" : "\<Up>"
inoremap <expr> <PageDown> pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<PageDown>"
inoremap <expr> <PageUp>   pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<PageUp>"
"let g:ycm_key_list_select_completion=['<c-n>']
let g:ycm_key_list_select_completion = ['<Down>']
"let g:ycm_key_list_previous_completion=['<c-p>']
let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
let g:ycm_key_list_previous_completion = ['<Up>']
let g:ycm_confirm_extra_conf=0 "关闭加载.ycm_extra_conf.py提示
let g:ycm_collect_identifiers_from_tags_files=1   " 开启 YCM 基于标签引擎
let g:ycm_min_num_of_chars_for_completion=2   "从第2个键入字符就开始罗列匹配项
let g:ycm_cache_omnifunc=0    " 禁止缓存匹配项,每次都重新生成匹配项
let g:ycm_seed_identifiers_with_syntax=1  " 语法关键字补全
let g:ycm_key_invoke_completion = '<D-y>'
let g:ycm_error_symbol = '✗'
let g:ycm_warning_symbol = '⚠'
"nnoremap <F5> :YcmForceCompileAndDiagnostics<CR>  "force recomile with syntastic
nnoremap <leader>lo :lopen<CR>   "open locationlist
nnoremap <leader>lc :lclose<CR>  "close locationlist
inoremap <leader><leader> <C-x><C-o>
"在注释输入中也能补全
let g:ycm_complete_in_comments = 1
"在字符串输入中也能补全
let g:ycm_complete_in_strings = 1
"注释和字符串中的文字也会被收入补全
let g:ycm_collect_identifiers_from_comments_and_strings = 0
let g:ycm_semantic_triggers = {}
let g:ycm_semantic_triggers.c = ['->', '.', ' ', '(', '[', '&','::']

"YCM 补全菜单配色
highlight Pmenu ctermbg=Black gui=bold
"highlight PmenuSel ctermfg=2 ctermbg=3 guifg=SeaGreen guibg=lightgrey " Select

nnoremap <Leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR> "跳转到定义或声明处"key map
nnoremap <D-j> :YcmCompleter GoToDeclaration<CR> "跳转到声明处"key map
let g:ycm_filetype_blacklist = {
      \ 'tagbar' : 1,
      \ 'qf' : 1,
      \ 'notes' : 1,
      \ 'markdown' : 1,
      \ 'unite' : 1,
      \ 'text' : 1,
      \ 'vimwiki' : 1,
      \ 'gitcommit' : 1,
      \}

"""""""""""color_coded""""""""""
let g:color_coded_enabled=1
let g:color_coded_filetypes = ['c', 'cpp', 'objc']
" Disable color_coded in diff mode
if &diff
      let g:color_coded_enabled = 0
endif

"""""""""""syntastic""""""""""""

"let g:syntastic_check_on_open = 1
let g:syntastic_cpp_include_dirs = ['/usr/include/','~/source_iflytek/Y_XPush/Source/third_party','~/source_iflytek/Y_XPush/Source/include','~/source_iflytek/Y_XPush/Source/src/core']
let g:syntastic_cpp_remove_include_errors = 1
let g:syntastic_cpp_check_header = 1
let g:syntastic_cpp_compiler = 'clang++'
let g:syntastic_cpp_compiler_options = '-std=c++11 -stdlib=libstdc++'
"set error or warning signs
let g:syntastic_error_symbol = '✗'
let g:syntastic_warning_symbol = '⚠'
"whether to show balloons
let g:syntastic_enable_balloons = 1


" source explorer {{{
let g:SrcExpl_winHeight = 8
let g:SrcExpl_refreshTime = 300
" // Set "Enter" key to jump into the exact definition context
let g:SrcExpl_jumpKey = "<ENTER>"

" // Set "Space" key for back from the definition context
let g:SrcExpl_gobackKey = "<SPACE>"

let g:SrcExpl_pluginList = [
        \ "__Tag_List__",
        \ "_NERD_tree_",
        \ "Source_Explorer"
    \ ]

let g:SrcExpl_searchLocalDef = 1
let g:SrcExpl_isUpdateTags = 0
let g:SrcExpl_updateTagsCmd = "ctags --sort=foldcase -R ."
let g:SrcExpl_updateTagsKey = "<F10>"
let g:SrcExpl_prevDefKey = "<F3>" 
let g:SrcExpl_nextDefKey = "<F4>" 

" }}}

" Configure like an IDE {{{

" " Open and close the srcexpl.vim separately
autocmd FileType c,cpp,cmake nmap <Leader>src :SrcExplToggle<CR>

" " Open and close the taglist.vim separately
autocmd FileType c,cpp,go,cmake nmap <Leader>tag :TagbarToggle<CR>

" " Open and close the NERD_tree.vim separately
"autocmd FileType c,cpp,cmake nmap <Leader>nt  :NERDTreeToggle<CR>
nmap <Leader>nt  :NERDTreeToggle<CR>

" }}}


" delimitMate {{{

let delimitMate_expand_cr      = 1
let delimitMate_jump_expansion = 1

" }}}


" neosippet key mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)


" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif
" Tell Neosnippet about the other snippets
let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets'
let g:neosnippet#disable_runtime_snippets = { "_": 1, }


"autocmd FileType c,cpp colorscheme wombat 

"""""""""""""""doxygen""""""""""""""""""""""
let g:DoxygenToolkit_briefTag_pre="@brief \n" 
let g:DoxygenToolkit_paramTag_pre="@param \n" 
let g:DoxygenToolkit_returnTag="@returns " 
let g:DoxygenToolkit_authorName="yuning"
let g:DoxygenToolkit_versionTag="@version 1.0"
let g:DoxygenToolkit_licenseTag="GPL 2.0"

let s:licenseTag = "Copyright(C)\<enter>"
let s:licenseTag = s:licenseTag . "For free\<enter>"
let s:licenseTag = s:licenseTag . "All right reserved\<enter>"
let g:DoxygenToolkit_licenseTag = s:licenseTag
let g:DoxygenToolkit_briefTag_funcName="yes"
let g:doxygen_enhanced_color=1


nmap <C-A>A :DoxAuthor
nmap <C-A>F :Dox
nmap <C-A>D :DoxBlock
nmap <C-A>C 0/** */<Left><Left>

" Markdown

let g:instant_markdown_slow = 1
let g:instant_markdown_autostart = 0

au FileType markdown nmap <F3> :InstantMarkdownPreview<CR>
nnoremap <Leader>ud :GundoToggle<CR>

" SimpylFold
let g:SimpylFold_docstring_preview = 0
let b:did_indent=1

" NERD_tree 
"let NERDTreeMinimalUI=1
au bufenter * if(winnr("$") ==1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") |q|endif

let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ "Unknown"   : "?"
    \ }


" NERDCommenter

" Unit.vim 
call unite#filters#matcher_default#use(['matcher_fuzzy'])
call unite#filters#sorter_default#use(['sorter_rank'])
call unite#custom#profile('default', 'context', {
              \ 'start_insert': 1
              \ })
call unite#custom#source('file_rec/async','sorters','sorter_rank', )
" replacing unite with ctrl-p
let g:unite_data_directory='~/.vim/.cache/unite'
let g:unite_enable_start_insert=1
let g:unite_source_history_yank_enable=1
let g:unite_prompt='» '
let g:unite_split_rule = 'botright'
if executable('ag')
let g:unite_source_grep_command='ag'
let g:unite_source_grep_default_opts='--smart-case --line-numbers --nogroup -S -C4'
let g:unite_source_grep_recursive_opt=''
nnoremap <silent> <Leader>ag :Unite -silent -auto-resize
        \ -buffer-name=ag grep<CR>
endif
nnoremap <silent> <c-p> :Unite -auto-resize file file_mru file_rec<cr>

" Add for LaTex"
let g:ycm_semantic_triggers = {
\  'tex'  : ['\ref{','\cite{'],
\ }

" For  Latex-Box "
let g:LatexBox_split_type = "new"

" For cscope
" s: Find this C symbol
nnoremap  <leader>fs :call CscopeFind('s', expand('<cword>'))<CR>
" g: Find this definition
nnoremap  <leader>fg :call CscopeFind('g', expand('<cword>'))<CR>
" d: Find functions called by this function
nnoremap  <leader>fd :call CscopeFind('d', expand('<cword>'))<CR>
" c: Find functions calling this function
nnoremap  <leader>fc :call CscopeFind('c', expand('<cword>'))<CR>
" t: Find this text string
nnoremap  <leader>ft :call CscopeFind('t', expand('<cword>'))<CR>
" e: Find this egrep pattern
nnoremap  <leader>fe :call CscopeFind('e', expand('<cword>'))<CR>
" f: Find this file
nnoremap  <leader>ff :call CscopeFind('f', expand('<cword>'))<CR>
" i: Find files #including this file
nnoremap  <leader>fi :call CscopeFind('i', expand('<cword>'))<CR>

" For conque_gdb
let g:ConqueGdb_SrcSplit = 'left'

